import { Footer } from "@/components/Footer";
import { Navbar } from "@/components/Navbar";
import { getAllPaths } from "@/hooks/getAllPaths";
import { getContactData, getLabelsData, getMenuData } from "@/hooks/getData";
import { getPageData } from "@/hooks/getPageData";
import { ContactType, LabelType, MenuType, PageType } from "@/utils/baseTypes";
import { Modules } from "@/utils/module-list";
import { GetStaticPropsContext } from "next";

import Head from "next/head";

interface DynamicPageProps {
  pageData: PageType[];
  contactData: ContactType;
  menuData: MenuType[];
  labelsData: LabelType[];
}

export default function DynamicPage({
  pageData,
  contactData,
  menuData,
  labelsData,
}: DynamicPageProps) {
  const mainMenu = menuData?.find(
    (menu) => menu.attributes.slug === "main-menu"
  );

  const _labels = labelsData?.map((label) => {
    return {
      [label.attributes.label.Name]: label.attributes.label.Value,
    };
  });

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Navbar mainMenu={mainMenu} />
        {pageData[0] &&
          pageData[0].attributes.Module &&
          pageData[0].attributes.Module.map((module, index) => (
            <Modules key={index} module={module} labels={_labels} />
          ))}
        <Footer
          showContactShowcase={
            pageData && pageData[0]?.attributes.Slug !== "contact"
          }
          contactData={contactData}
          mainMenu={mainMenu}
          labels={_labels}
        />
      </main>
    </>
  );
}

export async function getStaticPaths({}) {
  const allPaths = await getAllPaths();
  return {
    paths: allPaths,
    fallback: "blocking",
  };
}

export async function getStaticProps(context: GetStaticPropsContext) {
  const { dynamicRoute }: any = context.params;

  const pageData = await getPageData(dynamicRoute);
  const contactData = await getContactData();
  const menuData = await getMenuData();
  const labelsData = await getLabelsData();
  return {
    props: {
      pageData,
      contactData,
      menuData,
      labelsData,
    },
    revalidate: 120,
  };
}
